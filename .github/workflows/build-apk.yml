name: Build Android APK

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Cache buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}
        
    - name: Cache buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          python3-venv \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo6 \
          cmake \
          libffi8 \
          libgmp-dev \
          libmpc-dev \
          libmpfr-dev \
          make \
          wget \
          zip \
          unzip \
          openjdk-17-jdk \
          autoconf \
          libtool \
          pkg-config
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33
        pip install kivy[base]
        
    - name: Install app dependencies
      run: |
        # Install Android-compatible dependencies
        if [ -f requirements_android.txt ]; then
          pip install -r requirements_android.txt
        else
          # Fallback to manual installation
          pip install pandas numpy
        fi
        
    - name: Verify mobile files
      run: |
        if [ ! -f main_mobile.py ]; then
          echo "main_mobile.py not found!"
          exit 1
        fi
        if [ ! -f mobile_stock_analyzer.py ]; then
          echo "mobile_stock_analyzer.py not found!"
          exit 1
        fi
        
    - name: Verify buildozer.spec
      run: |
        if [ ! -f buildozer.spec ]; then
          echo "buildozer.spec not found!"
          exit 1
        fi
        cat buildozer.spec
        
    - name: Download and setup NDK 23c
      run: |
        # Create NDK directory
        sudo mkdir -p /usr/local/lib/android/sdk/ndk
        
        # Download NDK 23c
        wget -q https://dl.google.com/android/repository/android-ndk-r23c-linux.zip
        unzip -q android-ndk-r23c-linux.zip
        sudo mv android-ndk-r23c /usr/local/lib/android/sdk/ndk/23.2.8568313
        
        # Set permissions
        sudo chmod -R 755 /usr/local/lib/android/sdk/ndk/23.2.8568313
        
        # Set NDK environment variables
        echo "ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/23.2.8568313" >> $GITHUB_ENV
        echo "ANDROID_NDK=/usr/local/lib/android/sdk/ndk/23.2.8568313" >> $GITHUB_ENV
        
        # Verify NDK installation
        ls -la /usr/local/lib/android/sdk/ndk/23.2.8568313
        
    - name: Build APK with buildozer
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export ANDROID_HOME=$ANDROID_HOME
        export ANDROID_NDK_HOME=/usr/local/lib/android/sdk/ndk/23.2.8568313
        export ANDROID_NDK=/usr/local/lib/android/sdk/ndk/23.2.8568313
        export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
        
        # Print environment info for debugging
        echo "=== Environment Info ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer version)"
        echo "Java version: $(java -version)"
        
        # Accept Android SDK licenses
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Clean previous builds
        buildozer android clean || true
        
        # Build the APK with verbose output
        buildozer -v android debug
        
    - name: List build outputs
      run: |
        echo "Contents of bin directory:"
        ls -la bin/ || echo "bin directory not found"
        echo "Contents of .buildozer directory:"
        find .buildozer -name "*.apk" -type f || echo "No APK files found in .buildozer"
        
    - name: Find APK file
      id: find_apk
      run: |
        APK_PATH=$(find . -name "*.apk" -type f | head -1)
        if [ -z "$APK_PATH" ]; then
          echo "No APK file found!"
          exit 1
        fi
        echo "APK found at: $APK_PATH"
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        
        # Get APK info
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        APK_NAME=$(basename "$APK_PATH")
        echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: ${{ steps.find_apk.outputs.apk_path }}
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_apk.outputs.apk_path }}
        name: Release ${{ github.ref_name }}
        body: |
          ## 📱 智能股票分析 Android APK
          
          ### 📦 构建信息
          - **版本**: ${{ github.ref_name }}
          - **构建时间**: ${{ github.event.head_commit.timestamp }}
          - **APK大小**: ${{ steps.find_apk.outputs.apk_size }}
          - **文件名**: ${{ steps.find_apk.outputs.apk_name }}
          
          ### 🚀 功能特性
          - 智能选股：支持自然语言输入选股规则
          - 个股分析：详细的股票技术分析
          - 移动端优化：专为Android设备优化的界面
          - 实时数据：集成多个数据源获取最新股票信息
          
          ### 📲 安装说明
          1. 下载APK文件到Android设备
          2. 允许安装未知来源应用
          3. 点击APK文件进行安装
          4. 确保设备有网络连接以获取股票数据
          
          ### ⚠️ 注意事项
          - 需要Android 5.0 (API 21) 或更高版本
          - 需要网络权限以获取股票数据
          - 首次启动可能需要较长时间初始化
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment PR with APK info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const apkPath = '${{ steps.find_apk.outputs.apk_path }}';
          const apkSize = '${{ steps.find_apk.outputs.apk_size }}';
          const apkName = '${{ steps.find_apk.outputs.apk_name }}';
          
          const comment = `## 📱 APK 构建成功！
          
          **文件信息:**
          - 📦 文件名: \`${apkName}\`
          - 📏 文件大小: ${apkSize}
          - ⏰ 构建时间: ${new Date().toISOString()}
          
          **下载链接:**
          APK文件已上传到 GitHub Actions Artifacts，可以在 [Actions 页面](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 下载。
          
          **测试说明:**
          1. 下载APK文件
          2. 在Android设备上安装
          3. 测试主要功能是否正常
          4. 反馈任何问题或建议`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });